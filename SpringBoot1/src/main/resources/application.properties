# Spring Boot가 어플리케이션을 구동할 때 자동으로 로딩되는 파일
# Key-value 형식으로 작성하면 어플리케이션에서 참조하여 사용

# ex) DB연결정보, Tomcat 정보 등

spring.application.name=SpringBoot1

#Context Path 수정 -> Server가 프로젝트를 부르는 이름
server.servlet.context-path=/SpringBoot1

# 내장된 tomcat의 포트번호 변경
server.port=8081

# DB연결 설정
spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@project-db-campus.smhrd.com:1524:xe
spring.datasource.username=aws_test
spring.datasource.password=aws_test


#Spring JPA(JDBC -> API로 변형한 것) : SQL 쿼리를 자동 생성(편리, 간편, 유지보수 편리)

# oracleDB 상세설정 : dialect(방언, 언어)를 지정, 즉 oracle에 맞게 지정 
spring.jpa.database-platform=org.hibernate.dialect.OracleDialect

# 스키마 생성
# JPA는 ORM(Object-Relational Mapping)으로 객체와 테이블을 매핑을 이루는 기술이다. 
# 만들어진 VO(DTO)객체를 처음에 생성하기 위해 create로 설정!
# 이후에는 데이터를 쌓기 위해 update로 변경
spring.jpa.hibernate.ddl-auto=create

# 실행되는 SQL문장 보여주기
spring.jpa.show-sql=true

# 실제 JPA 구현체인 Hibernate가 동작하면서 발생하는 SQL을 포맷팅해서 출력
spring.jpa.properties.hibernate.format_sql=true

# thymeleaf 참조 경로
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

# thymeleaf에 대한 캐시를 남기지 않는다. cache=false 설정(운영시는 true)
spring.thymeleaf.cache=false
# templates 디렉토리에 파일이 있는지 없는지 체크, 없으면 에러를 발생시킨다.
spring.thymeleaf.check-template-location=true
